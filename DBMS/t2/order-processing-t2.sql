CREATE DATABASE order_database;
use order_database;

CREATE TABLE SALESMAN 
(SALESMAN_ID INT, 
SNAME VARCHAR (30), 
CITY VARCHAR (30), 
COMMISSION VARCHAR (30), 
PRIMARY KEY (SALESMAN_ID));

SELECT *FROM salesman;

INSERT INTO SALESMAN VALUES (1000,'JOHN','BANGALORE','25 %'); 
INSERT INTO SALESMAN VALUES (2000,'RAVI','BANGALORE','20 %'); 
INSERT INTO SALESMAN VALUES (3000, 'KUMAR','MYSORE','15 %'); 
INSERT INTO SALESMAN VALUES (4000,'SMITH','DELHI','30 %'); 
INSERT INTO SALESMAN VALUES (5000, 'HARSHA','HYDRABAD','15 %'); 


CREATE TABLE CUSTOMER1 
(
CUSTOMER_ID INT, 
CUST_NAME VARCHAR(30), 
CITY VARCHAR(30), 
GRADE INT, 
SALESMAN_ID INT,
PRIMARY KEY (CUSTOMER_ID ),
FOREIGN KEY (SALESMAN_ID) REFERENCES SALESMAN(SALESMAN_ID)ON DELETE SET NULL);


SELECT *FROM customer1;

INSERT INTO CUSTOMER1 VALUES (10, 'PREETHI','BANGALORE', 100, 1000); 
INSERT INTO CUSTOMER1 VALUES (11, 'VIVEK','MANGALORE', 300, 1000); 
INSERT INTO CUSTOMER1 VALUES (12, 'BHASKAR','CHENNAI', 400, 2000); 
INSERT INTO CUSTOMER1 VALUES (13, 'CHETHAN','BANGALORE', 200, 2000); 
INSERT INTO CUSTOMER1 VALUES (14, 'MAMATHA','BANGALORE', 400, 3000); 


CREATE TABLE ORDERS 
(ORD_NO INT, 
PURCHASE_AMT INT, 
ORD_DATE DATE, 
CUSTOMER_ID INT,
SALESMAN_ID INT,
PRIMARY KEY (ORD_NO), 
FOREIGN KEY (CUSTOMER_ID)REFERENCES CUSTOMER1 (CUSTOMER_ID) ON DELETE CASCADE, 
FOREIGN KEY (SALESMAN_ID) REFERENCES SALESMAN (SALESMAN_ID) ON DELETE CASCADE);


SELECT *FROM orders;

INSERT INTO ORDERS VALUES (50, 5000,'2017-05-04', 10, 1000); 
INSERT INTO ORDERS VALUES (51, 450, '2017-01-20', 10, 2000);
INSERT INTO ORDERS VALUES (52, 1000, '2017-02-24', 13, 2000); 
INSERT INTO ORDERS VALUES (53, 3500, '2017-04-13', 14, 3000); 
INSERT INTO ORDERS VALUES (54, 550, '2017-03-09', 12, 2000);


# 1. COUNT the customers WITH grades above Bangalore’s average. 

SELECT GRADE,COUNT(DISTINCT CUSTOMER_ID) 
FROM CUSTOMER1 
GROUP BY GRADE 
HAVING GRADE > (SELECT AVG(GRADE) 
		FROM CUSTOMER1 
		WHERE CITY='BANGALORE');
		
# 2. Find the NAME AND numbers of ALL salesmen who had more THAN ONE customer. 

SELECT SALESMAN_ID,SNAME 
FROM SALESMAN A 
WHERE 1 <(SELECT COUNT(*) 
	  FROM CUSTOMER1 C
	  WHERE C.SALESMAN_ID=A.SALESMAN_ID);

#3. LIST ALL salesmen AND indicate those who have AND don’t have customers IN their cities (USE UNION operation.) 

SELECT S.SALESMAN_ID,S.SNAME,C.CUST_NAME,S.COMMISSION 
FROM SALESMAN S, CUSTOMER1 C 
WHERE S.CITY = C.CITY 
UNION 
SELECT SALESMAN_ID,SNAME, 'NO MATCH', COMMISSION 
FROM SALESMAN 
WHERE NOT CITY = ANY 
(SELECT CITY 
FROM CUSTOMER1) 
ORDER BY 2 DESC;

#4. CREATE a VIEW that finds the salesman who has the customer WITH the highest ORDER of a day. 

CREATE VIEW ELITSALESMAN AS 
SELECT O.ORD_DATE,S.SALESMAN_ID,S.SNAME 
FROM SALESMAN S, ORDERS O
WHERE S.SALESMAN_ID = O.SALESMAN_ID AND O.PURCHASE_AMT=(SELECT MAX(PURCHASE_AMT) 
							FROM ORDERS C 
							WHERE C.ORD_DATE = O.ORD_DATE);

SELECT *FROM ELITSALESMAN;

# 5. Demonstrate the DELETE operation BY removing salesman WITH id 1000. ALL his orders must also be deleted. 
     #USE ON DELETE CASCADE AT the END of FOREIGN KEY definitions WHILE creating child TABLE orders AND THEN EXECUTE the following: 
     #USE ON DELETE SET NULL AT the END of FOREIGN KEY definitions WHILE creating child TABLE customers AND THEN executes the following: 

DELETE FROM SALESMAN 
WHERE SALESMAN_ID=1000;

SELECT *FROM SALESMAN;
